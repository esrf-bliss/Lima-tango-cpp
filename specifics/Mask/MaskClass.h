//=============================================================================
//
// file :         MaskClass.h
//
// description :  Include for the MaskClass root class.
//                This class is the singleton class for
//                the Mask device class.
//                It contains all properties and methods which the 
//                Mask requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _MASKCLASS_H
#define _MASKCLASS_H

#ifdef WIN32
#include <tango.h>
#endif

#include <Mask.h>

#ifndef WIN32
#include <tango.h>
#endif

namespace Mask_ns
{//=====================================
//	Define classes for attributes
//=====================================
class maskImageAttrib: public Tango::ImageAttr
{
public:
	maskImageAttrib():ImageAttr("maskImage", Tango::DEV_SHORT, Tango::READ_WRITE, 10000, 10000) {};
	~maskImageAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Mask *>(dev))->read_maskImage(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Mask *>(dev))->write_maskImage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Mask *>(dev))->is_maskImage_allowed(ty);}
};

class operationsListAttrib: public Tango::SpectrumAttr
{
public:
	operationsListAttrib():SpectrumAttr("operationsList", Tango::DEV_STRING, Tango::READ, 1024) {};
	~operationsListAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Mask *>(dev))->read_operationsList(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Mask *>(dev))->is_operationsList_allowed(ty);}
};

class runLevelAttrib: public Tango::Attr
{
public:
	runLevelAttrib():Attr("runLevel", Tango::DEV_ULONG, Tango::WRITE) {};
	~runLevelAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Mask *>(dev))->read_runLevel(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Mask *>(dev))->write_runLevel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Mask *>(dev))->is_runLevel_allowed(ty);}
};

class versionAttrib: public Tango::Attr
{
public:
	versionAttrib():Attr("version", Tango::DEV_STRING, Tango::READ) {};
	~versionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Mask *>(dev))->read_version(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Mask *>(dev))->is_version_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
//
// The MaskClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	MaskClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static MaskClass *init(const char *);
	static MaskClass *instance();
	~MaskClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	MaskClass(string &);
	static MaskClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Mask_ns

#endif // _MASKCLASS_H
