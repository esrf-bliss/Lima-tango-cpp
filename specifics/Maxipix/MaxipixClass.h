//=============================================================================
//
// file :         MaxipixClass.h
//
// description :  Include for the MaxipixClass root class.
//                This class is the singleton class for
//                the Maxipix device class.
//                It contains all properties and methods which the 
//                Maxipix requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _MAXIPIXCLASS_H
#define _MAXIPIXCLASS_H

#include <tango.h>
#include <Maxipix.h>


namespace Maxipix_ns
{//=====================================
//	Define classes for attributes
//=====================================
class triggerLevelAttrib: public Tango::Attr
{
public:
	triggerLevelAttrib():Attr("triggerLevel", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~triggerLevelAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Maxipix *>(dev))->read_triggerLevel(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Maxipix *>(dev))->write_triggerLevel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Maxipix *>(dev))->is_triggerLevel_allowed(ty);}
};

class shutterLevelAttrib: public Tango::Attr
{
public:
	shutterLevelAttrib():Attr("shutterLevel", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~shutterLevelAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Maxipix *>(dev))->read_shutterLevel(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Maxipix *>(dev))->write_shutterLevel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Maxipix *>(dev))->is_shutterLevel_allowed(ty);}
};

class readyLevelAttrib: public Tango::Attr
{
public:
	readyLevelAttrib():Attr("readyLevel", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~readyLevelAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Maxipix *>(dev))->read_readyLevel(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Maxipix *>(dev))->write_readyLevel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Maxipix *>(dev))->is_readyLevel_allowed(ty);}
};

class readyModeAttrib: public Tango::Attr
{
public:
	readyModeAttrib():Attr("readyMode", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~readyModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Maxipix *>(dev))->read_readyMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Maxipix *>(dev))->write_readyMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Maxipix *>(dev))->is_readyMode_allowed(ty);}
};

class gateLevelAttrib: public Tango::Attr
{
public:
	gateLevelAttrib():Attr("gateLevel", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~gateLevelAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Maxipix *>(dev))->read_gateLevel(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Maxipix *>(dev))->write_gateLevel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Maxipix *>(dev))->is_gateLevel_allowed(ty);}
};

class gateAttrib: public Tango::Attr
{
public:
	gateAttrib():Attr("gate", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~gateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Maxipix *>(dev))->read_gate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Maxipix *>(dev))->write_gate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Maxipix *>(dev))->is_gate_allowed(ty);}
};

class fillModeAttrib: public Tango::Attr
{
public:
	fillModeAttrib():Attr("fillMode", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~fillModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Maxipix *>(dev))->read_fillMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Maxipix *>(dev))->write_fillMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Maxipix *>(dev))->is_fillMode_allowed(ty);}
};

class energyThresholdAttrib: public Tango::Attr
{
public:
	energyThresholdAttrib():Attr("energyThreshold", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~energyThresholdAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Maxipix *>(dev))->read_energyThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Maxipix *>(dev))->write_energyThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Maxipix *>(dev))->is_energyThreshold_allowed(ty);}
};

class deviceVersionAttrib: public Tango::Attr
{
public:
	deviceVersionAttrib():Attr("deviceVersion", Tango::DEV_STRING, Tango::READ) {};
	~deviceVersionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Maxipix *>(dev))->read_deviceVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Maxipix *>(dev))->is_deviceVersion_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
//
// The MaxipixClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	MaxipixClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static MaxipixClass *init(const char *);
	static MaxipixClass *instance();
	~MaxipixClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	MaxipixClass(string &);
	static MaxipixClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Maxipix_ns

#endif // _MAXIPIXCLASS_H
