/*----- PROTECTED REGION ID(SlsEigerClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        SlsEigerClass.h
//
// description : Include for the SlsEiger root class.
//               This class is the singleton class for
//                the SlsEiger device class.
//               It contains all properties and methods which the 
//               SlsEiger requires only once e.g. the commands.
//
// project :     Sls dectector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SlsEigerClass_H
#define SlsEigerClass_H

#include <tango.h>
#include <SlsEiger.h>


/*----- PROTECTED REGION END -----*/	//	SlsEigerClass.h


namespace SlsEiger_ns
{
/*----- PROTECTED REGION ID(SlsEigerClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute clockDivider class definition
class clockDividerAttrib: public Tango::Attr
{
public:
	clockDividerAttrib():Attr("clockDivider",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~clockDividerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_clockDivider(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_clockDivider(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_clockDivider_allowed(ty);}
};

//	Attribute parallelMode class definition
class parallelModeAttrib: public Tango::Attr
{
public:
	parallelModeAttrib():Attr("parallelMode",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~parallelModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_parallelMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_parallelMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_parallelMode_allowed(ty);}
};

//	Attribute overflowMode class definition
class overflowModeAttrib: public Tango::Attr
{
public:
	overflowModeAttrib():Attr("overflowMode",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~overflowModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_overflowMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_overflowMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_overflowMode_allowed(ty);}
};

//	Attribute subFrameExposureTime class definition
class subFrameExposureTimeAttrib: public Tango::Attr
{
public:
	subFrameExposureTimeAttrib():Attr("subFrameExposureTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~subFrameExposureTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_subFrameExposureTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_subFrameExposureTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_subFrameExposureTime_allowed(ty);}
};

//	Attribute gainMode class definition
class gainModeAttrib: public Tango::Attr
{
public:
	gainModeAttrib():Attr("gainMode",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~gainModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_gainMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_gainMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_gainMode_allowed(ty);}
};

//	Attribute thresholdEnergy class definition
class thresholdEnergyAttrib: public Tango::Attr
{
public:
	thresholdEnergyAttrib():Attr("thresholdEnergy",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~thresholdEnergyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_thresholdEnergy(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_thresholdEnergy(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_thresholdEnergy_allowed(ty);}
};

//	Attribute countRateCorrectionActivation class definition
class countRateCorrectionActivationAttrib: public Tango::Attr
{
public:
	countRateCorrectionActivationAttrib():Attr("countRateCorrectionActivation",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~countRateCorrectionActivationAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_countRateCorrectionActivation(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_countRateCorrectionActivation(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_countRateCorrectionActivation_allowed(ty);}
};

//	Attribute countRateCorrection class definition
class countRateCorrectionAttrib: public Tango::Attr
{
public:
	countRateCorrectionAttrib():Attr("countRateCorrection",
			Tango::DEV_LONG, Tango::READ) {};
	~countRateCorrectionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_countRateCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_countRateCorrection_allowed(ty);}
};

//	Attribute gapPixelsActivation class definition
class gapPixelsActivationAttrib: public Tango::Attr
{
public:
	gapPixelsActivationAttrib():Attr("gapPixelsActivation",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~gapPixelsActivationAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_gapPixelsActivation(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_gapPixelsActivation(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_gapPixelsActivation_allowed(ty);}
};

//	Attribute edgePixelsCorrection class definition
class edgePixelsCorrectionAttrib: public Tango::Attr
{
public:
	edgePixelsCorrectionAttrib():Attr("edgePixelsCorrection",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~edgePixelsCorrectionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_edgePixelsCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_edgePixelsCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_edgePixelsCorrection_allowed(ty);}
};

//	Attribute cornerPixelsCorrection class definition
class cornerPixelsCorrectionAttrib: public Tango::Attr
{
public:
	cornerPixelsCorrectionAttrib():Attr("cornerPixelsCorrection",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~cornerPixelsCorrectionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_cornerPixelsCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsEiger *>(dev))->write_cornerPixelsCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_cornerPixelsCorrection_allowed(ty);}
};

//	Attribute configFileName class definition
class configFileNameAttrib: public Tango::Attr
{
public:
	configFileNameAttrib():Attr("configFileName",
			Tango::DEV_STRING, Tango::READ) {};
	~configFileNameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_configFileName(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_configFileName_allowed(ty);}
};

//	Attribute detectorFirmwareVersion class definition
class detectorFirmwareVersionAttrib: public Tango::Attr
{
public:
	detectorFirmwareVersionAttrib():Attr("detectorFirmwareVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~detectorFirmwareVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_detectorFirmwareVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_detectorFirmwareVersion_allowed(ty);}
};

//	Attribute detectorSoftwareVersion class definition
class detectorSoftwareVersionAttrib: public Tango::Attr
{
public:
	detectorSoftwareVersionAttrib():Attr("detectorSoftwareVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~detectorSoftwareVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_detectorSoftwareVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_detectorSoftwareVersion_allowed(ty);}
};

//	Attribute tempFpga1 class definition
class tempFpga1Attrib: public Tango::Attr
{
public:
	tempFpga1Attrib():Attr("tempFpga1",
			Tango::DEV_LONG, Tango::READ) {};
	~tempFpga1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempFpga1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempFpga1_allowed(ty);}
};

//	Attribute tempFpga2 class definition
class tempFpga2Attrib: public Tango::Attr
{
public:
	tempFpga2Attrib():Attr("tempFpga2",
			Tango::DEV_LONG, Tango::READ) {};
	~tempFpga2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempFpga2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempFpga2_allowed(ty);}
};

//	Attribute tempFpgaext1 class definition
class tempFpgaext1Attrib: public Tango::Attr
{
public:
	tempFpgaext1Attrib():Attr("tempFpgaext1",
			Tango::DEV_LONG, Tango::READ) {};
	~tempFpgaext1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempFpgaext1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempFpgaext1_allowed(ty);}
};

//	Attribute tempFpgaext2 class definition
class tempFpgaext2Attrib: public Tango::Attr
{
public:
	tempFpgaext2Attrib():Attr("tempFpgaext2",
			Tango::DEV_LONG, Tango::READ) {};
	~tempFpgaext2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempFpgaext2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempFpgaext2_allowed(ty);}
};

//	Attribute temp10ge1 class definition
class temp10ge1Attrib: public Tango::Attr
{
public:
	temp10ge1Attrib():Attr("temp10ge1",
			Tango::DEV_LONG, Tango::READ) {};
	~temp10ge1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_temp10ge1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_temp10ge1_allowed(ty);}
};

//	Attribute temp10ge2 class definition
class temp10ge2Attrib: public Tango::Attr
{
public:
	temp10ge2Attrib():Attr("temp10ge2",
			Tango::DEV_LONG, Tango::READ) {};
	~temp10ge2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_temp10ge2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_temp10ge2_allowed(ty);}
};

//	Attribute tempDcdc1 class definition
class tempDcdc1Attrib: public Tango::Attr
{
public:
	tempDcdc1Attrib():Attr("tempDcdc1",
			Tango::DEV_LONG, Tango::READ) {};
	~tempDcdc1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempDcdc1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempDcdc1_allowed(ty);}
};

//	Attribute tempDcdc2 class definition
class tempDcdc2Attrib: public Tango::Attr
{
public:
	tempDcdc2Attrib():Attr("tempDcdc2",
			Tango::DEV_LONG, Tango::READ) {};
	~tempDcdc2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempDcdc2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempDcdc2_allowed(ty);}
};

//	Attribute tempSodl1 class definition
class tempSodl1Attrib: public Tango::Attr
{
public:
	tempSodl1Attrib():Attr("tempSodl1",
			Tango::DEV_LONG, Tango::READ) {};
	~tempSodl1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempSodl1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempSodl1_allowed(ty);}
};

//	Attribute tempSodl2 class definition
class tempSodl2Attrib: public Tango::Attr
{
public:
	tempSodl2Attrib():Attr("tempSodl2",
			Tango::DEV_LONG, Tango::READ) {};
	~tempSodl2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempSodl2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempSodl2_allowed(ty);}
};

//	Attribute tempSodr1 class definition
class tempSodr1Attrib: public Tango::Attr
{
public:
	tempSodr1Attrib():Attr("tempSodr1",
			Tango::DEV_LONG, Tango::READ) {};
	~tempSodr1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempSodr1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempSodr1_allowed(ty);}
};

//	Attribute tempSodr2 class definition
class tempSodr2Attrib: public Tango::Attr
{
public:
	tempSodr2Attrib():Attr("tempSodr2",
			Tango::DEV_LONG, Tango::READ) {};
	~tempSodr2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempSodr2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempSodr2_allowed(ty);}
};

//	Attribute tempFpgafl1 class definition
class tempFpgafl1Attrib: public Tango::Attr
{
public:
	tempFpgafl1Attrib():Attr("tempFpgafl1",
			Tango::DEV_LONG, Tango::READ) {};
	~tempFpgafl1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempFpgafl1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempFpgafl1_allowed(ty);}
};

//	Attribute tempFpgafl2 class definition
class tempFpgafl2Attrib: public Tango::Attr
{
public:
	tempFpgafl2Attrib():Attr("tempFpgafl2",
			Tango::DEV_LONG, Tango::READ) {};
	~tempFpgafl2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempFpgafl2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempFpgafl2_allowed(ty);}
};

//	Attribute tempFpgafr1 class definition
class tempFpgafr1Attrib: public Tango::Attr
{
public:
	tempFpgafr1Attrib():Attr("tempFpgafr1",
			Tango::DEV_LONG, Tango::READ) {};
	~tempFpgafr1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempFpgafr1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempFpgafr1_allowed(ty);}
};

//	Attribute tempFpgafr2 class definition
class tempFpgafr2Attrib: public Tango::Attr
{
public:
	tempFpgafr2Attrib():Attr("tempFpgafr2",
			Tango::DEV_LONG, Tango::READ) {};
	~tempFpgafr2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsEiger *>(dev))->read_tempFpgafr2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsEiger *>(dev))->is_tempFpgafr2_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command SetCmd class definition
class SetCmdClass : public Tango::Command
{
public:
	SetCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SlsEiger *>(dev))->is_SetCmd_allowed(any);}
};

//	Command GetCmd class definition
class GetCmdClass : public Tango::Command
{
public:
	GetCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SlsEiger *>(dev))->is_GetCmd_allowed(any);}
};


/**
 *	The SlsEigerClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  SlsEigerClass : public Tango::DeviceClass
#else
class SlsEigerClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(SlsEigerClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static SlsEigerClass *init(const char *);
		static SlsEigerClass *instance();
		~SlsEigerClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		SlsEigerClass(string &);
		static SlsEigerClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	SlsEiger_H
